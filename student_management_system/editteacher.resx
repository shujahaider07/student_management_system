<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>